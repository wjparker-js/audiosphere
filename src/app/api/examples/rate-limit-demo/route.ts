import { NextRequest, NextResponse } from 'next/server';\nimport { \n  withRateLimitMiddleware, \n  withCustomRateLimit, \n  combineMiddlewares \n} from '@/lib/middleware/rateLimitMiddleware';\nimport { withErrorHandling } from '@/lib/error-handler';\nimport { createApiResponse } from '@/lib/data-transformer';\n\n// Example 1: Basic API rate limiting (100 requests per 15 minutes)\nexport const GET = withRateLimitMiddleware(\n  async (req: NextRequest) => {\n    return NextResponse.json(\n      createApiResponse(true, {\n        message: 'This endpoint has basic API rate limiting (100 requests per 15 minutes)',\n        timestamp: new Date().toISOString(),\n        clientIP: req.ip || 'unknown',\n        rateLimitType: 'api'\n      })\n    );\n  },\n  'api'\n);\n\n// Example 2: Custom rate limiting (5 requests per minute)\nexport const POST = withCustomRateLimit(\n  async (req: NextRequest) => {\n    const body = await req.json().catch(() => ({}));\n    \n    return NextResponse.json(\n      createApiResponse(true, {\n        message: 'This endpoint has custom rate limiting (5 requests per minute)',\n        timestamp: new Date().toISOString(),\n        clientIP: req.ip || 'unknown',\n        requestBody: body,\n        rateLimitType: 'custom'\n      })\n    );\n  },\n  {\n    windowMs: 60 * 1000, // 1 minute\n    max: 5, // 5 requests per minute\n    message: 'Too many requests to this custom endpoint. Please wait 1 minute.',\n    skipIf: (req) => {\n      // Skip rate limiting for requests with admin header (demo purposes)\n      return req.headers.get('x-admin-key') === 'demo-admin-key';\n    }\n  }\n);\n\n// Example 3: Combined middlewares (rate limiting + error handling)\nexport const PUT = combineMiddlewares(\n  (handler) => withRateLimitMiddleware(handler, 'posting'),\n  withErrorHandling\n)(async (req: NextRequest) => {\n  const body = await req.json();\n  \n  // Simulate some processing that might throw an error\n  if (body.shouldError) {\n    throw new Error('Simulated error for testing');\n  }\n  \n  return NextResponse.json(\n    createApiResponse(true, {\n      message: 'This endpoint combines rate limiting (posting limits) with error handling',\n      timestamp: new Date().toISOString(),\n      clientIP: req.ip || 'unknown',\n      requestBody: body,\n      rateLimitType: 'posting'\n    })\n  );\n});\n\n// Example 4: Very strict rate limiting (1 request per minute)\nexport const DELETE = withCustomRateLimit(\n  async (req: NextRequest) => {\n    return NextResponse.json(\n      createApiResponse(true, {\n        message: 'This endpoint has very strict rate limiting (1 request per minute)',\n        timestamp: new Date().toISOString(),\n        clientIP: req.ip || 'unknown',\n        rateLimitType: 'strict'\n      })\n    );\n  },\n  {\n    windowMs: 60 * 1000, // 1 minute\n    max: 1, // 1 request per minute\n    message: 'This endpoint is heavily rate limited. Only 1 request per minute allowed.'\n  }\n);\n"}