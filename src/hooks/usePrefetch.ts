'use client';\n\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useCallback } from 'react';\n\n// Types for prefetch data\ninterface Album {\n  id: number;\n  title: string;\n  artist: string;\n  coverImage: string;\n  releaseYear: number;\n  createdAt: string;\n  trackCount: number;\n}\n\ninterface Track {\n  id: number;\n  title: string;\n  artist: string;\n  albumTitle: string;\n  trackNumber: number;\n  duration: string;\n  durationSeconds: number;\n  filePath: string;\n  playCount: number;\n  status: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Prefetch functions\nasync function prefetchAlbumById(id: number): Promise<Album> {\n  const response = await fetch(`/api/albums/${id}`);\n  if (!response.ok) {\n    throw new Error(`Failed to prefetch album with ID ${id}`);\n  }\n  const data = await response.json();\n  return data.data;\n}\n\nasync function prefetchAlbumTracks(albumId: number): Promise<Track[]> {\n  const response = await fetch(`/api/albums/${albumId}/tracks`);\n  if (!response.ok) {\n    throw new Error(`Failed to prefetch tracks for album ${albumId}`);\n  }\n  const data = await response.json();\n  return data.data;\n}\n\nasync function prefetchBlogPost(id: number) {\n  const response = await fetch(`/api/blog/${id}`);\n  if (!response.ok) {\n    throw new Error(`Failed to prefetch blog post with ID ${id}`);\n  }\n  const data = await response.json();\n  return data.data;\n}\n\n// Custom hook for prefetching\nexport function usePrefetch() {\n  const queryClient = useQueryClient();\n\n  // Prefetch album details\n  const prefetchAlbum = useCallback(\n    (albumId: number) => {\n      queryClient.prefetchQuery({\n        queryKey: ['album', albumId],\n        queryFn: () => prefetchAlbumById(albumId),\n        staleTime: 5 * 60 * 1000, // 5 minutes\n      });\n    },\n    [queryClient]\n  );\n\n  // Prefetch album tracks\n  const prefetchTracks = useCallback(\n    (albumId: number) => {\n      queryClient.prefetchQuery({\n        queryKey: ['albumTracks', albumId],\n        queryFn: () => prefetchAlbumTracks(albumId),\n        staleTime: 5 * 60 * 1000, // 5 minutes\n      });\n    },\n    [queryClient]\n  );\n\n  // Prefetch both album and tracks together\n  const prefetchAlbumWithTracks = useCallback(\n    (albumId: number) => {\n      prefetchAlbum(albumId);\n      prefetchTracks(albumId);\n    },\n    [prefetchAlbum, prefetchTracks]\n  );\n\n  // Prefetch blog post\n  const prefetchBlog = useCallback(\n    (blogId: number) => {\n      queryClient.prefetchQuery({\n        queryKey: ['blogPost', blogId],\n        queryFn: () => prefetchBlogPost(blogId),\n        staleTime: 5 * 60 * 1000, // 5 minutes\n      });\n    },\n    [queryClient]\n  );\n\n  // Prefetch next page of results\n  const prefetchNextPage = useCallback(\n    (queryKey: string[], nextPage: number, queryFn: () => Promise<any>) => {\n      queryClient.prefetchQuery({\n        queryKey: [...queryKey, 'page', nextPage],\n        queryFn,\n        staleTime: 2 * 60 * 1000, // 2 minutes for pagination\n      });\n    },\n    [queryClient]\n  );\n\n  // Background refetch for stale data\n  const backgroundRefetch = useCallback(\n    (queryKey: string[]) => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n    [queryClient]\n  );\n\n  return {\n    prefetchAlbum,\n    prefetchTracks,\n    prefetchAlbumWithTracks,\n    prefetchBlog,\n    prefetchNextPage,\n    backgroundRefetch,\n  };\n}\n\n// Hook for hover prefetching with debouncing\nexport function useHoverPrefetch() {\n  const { prefetchAlbumWithTracks, prefetchBlog } = usePrefetch();\n\n  const handleAlbumHover = useCallback(\n    (albumId: number) => {\n      // Debounce prefetching to avoid excessive requests\n      const timeoutId = setTimeout(() => {\n        prefetchAlbumWithTracks(albumId);\n      }, 300); // 300ms delay\n\n      return () => clearTimeout(timeoutId);\n    },\n    [prefetchAlbumWithTracks]\n  );\n\n  const handleBlogHover = useCallback(\n    (blogId: number) => {\n      const timeoutId = setTimeout(() => {\n        prefetchBlog(blogId);\n      }, 300); // 300ms delay\n\n      return () => clearTimeout(timeoutId);\n    },\n    [prefetchBlog]\n  );\n\n  return {\n    handleAlbumHover,\n    handleBlogHover,\n  };\n}\n"