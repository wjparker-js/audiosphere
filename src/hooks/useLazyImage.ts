import { useState, useEffect, useRef, useCallback } from 'react';\nimport { useIntersectionObserver } from './useIntersectionObserver';\n\ninterface UseLazyImageProps {\n  src: string;\n  fallbackSrc?: string;\n  threshold?: number;\n  rootMargin?: string;\n  preload?: boolean;\n}\n\ninterface UseLazyImageReturn {\n  imageSrc: string;\n  isLoaded: boolean;\n  isLoading: boolean;\n  hasError: boolean;\n  imageRef: React.RefObject<HTMLElement>;\n  retry: () => void;\n}\n\n/**\n * Hook for lazy loading images with error handling and preloading\n */\nexport function useLazyImage({\n  src,\n  fallbackSrc,\n  threshold = 0.1,\n  rootMargin = '50px',\n  preload = false,\n}: UseLazyImageProps): UseLazyImageReturn {\n  const [imageSrc, setImageSrc] = useState<string>(preload ? src : '');\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [shouldLoad, setShouldLoad] = useState(preload);\n  const imageRef = useRef<HTMLElement>(null);\n  const imageElementRef = useRef<HTMLImageElement | null>(null);\n\n  // Use intersection observer to detect when image should be loaded\n  const { isIntersecting } = useIntersectionObserver({\n    elementRef: imageRef,\n    threshold,\n    rootMargin,\n    freezeOnceVisible: true,\n  });\n\n  // Trigger loading when image comes into view\n  useEffect(() => {\n    if (isIntersecting && !shouldLoad && !preload) {\n      setShouldLoad(true);\n    }\n  }, [isIntersecting, shouldLoad, preload]);\n\n  // Load image when shouldLoad becomes true\n  useEffect(() => {\n    if (!shouldLoad || !src) return;\n\n    setIsLoading(true);\n    setHasError(false);\n\n    // Create a new image element to preload\n    const img = new Image();\n    imageElementRef.current = img;\n\n    img.onload = () => {\n      setImageSrc(src);\n      setIsLoaded(true);\n      setIsLoading(false);\n      setHasError(false);\n    };\n\n    img.onerror = () => {\n      setIsLoading(false);\n      setHasError(true);\n      \n      // Try fallback image if available\n      if (fallbackSrc && src !== fallbackSrc) {\n        setImageSrc(fallbackSrc);\n        \n        // Load fallback image\n        const fallbackImg = new Image();\n        fallbackImg.onload = () => {\n          setIsLoaded(true);\n          setHasError(false);\n        };\n        fallbackImg.onerror = () => {\n          setHasError(true);\n        };\n        fallbackImg.src = fallbackSrc;\n      }\n    };\n\n    img.src = src;\n\n    // Cleanup function\n    return () => {\n      if (imageElementRef.current) {\n        imageElementRef.current.onload = null;\n        imageElementRef.current.onerror = null;\n      }\n    };\n  }, [shouldLoad, src, fallbackSrc]);\n\n  // Retry function to reload failed images\n  const retry = useCallback(() => {\n    if (hasError) {\n      setHasError(false);\n      setIsLoaded(false);\n      setShouldLoad(true);\n    }\n  }, [hasError]);\n\n  return {\n    imageSrc,\n    isLoaded,\n    isLoading,\n    hasError,\n    imageRef,\n    retry,\n  };\n}\n\nexport default useLazyImage;\n"}