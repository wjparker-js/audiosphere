'use client';\n\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useEffect, useCallback } from 'react';\n\n// Hook for background refetching of stale data\nexport function useBackgroundRefetch() {\n  const queryClient = useQueryClient();\n\n  // Refetch stale queries in the background\n  const refetchStaleQueries = useCallback(() => {\n    queryClient.invalidateQueries({\n      predicate: (query) => {\n        // Only refetch queries that are stale and have been used recently\n        const isStale = query.isStale();\n        const lastUsed = query.state.dataUpdatedAt;\n        const fiveMinutesAgo = Date.now() - 5 * 60 * 1000;\n        \n        return isStale && lastUsed > fiveMinutesAgo;\n      },\n    });\n  }, [queryClient]);\n\n  // Refetch specific query types\n  const refetchAlbums = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: ['albums'] });\n  }, [queryClient]);\n\n  const refetchTracks = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: ['tracks'] });\n  }, [queryClient]);\n\n  const refetchPlaylists = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: ['playlists'] });\n  }, [queryClient]);\n\n  const refetchBlogPosts = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: ['blogPosts'] });\n  }, [queryClient]);\n\n  // Set up automatic background refetching\n  useEffect(() => {\n    // Refetch stale data when the user comes back to the tab\n    const handleVisibilityChange = () => {\n      if (!document.hidden) {\n        refetchStaleQueries();\n      }\n    };\n\n    // Refetch stale data when the user comes back online\n    const handleOnline = () => {\n      refetchStaleQueries();\n    };\n\n    // Set up periodic background refetching (every 10 minutes)\n    const intervalId = setInterval(() => {\n      if (!document.hidden) {\n        refetchStaleQueries();\n      }\n    }, 10 * 60 * 1000); // 10 minutes\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    window.addEventListener('online', handleOnline);\n\n    return () => {\n      clearInterval(intervalId);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      window.removeEventListener('online', handleOnline);\n    };\n  }, [refetchStaleQueries]);\n\n  return {\n    refetchStaleQueries,\n    refetchAlbums,\n    refetchTracks,\n    refetchPlaylists,\n    refetchBlogPosts,\n  };\n}\n\n// Hook for prefetching next page data\nexport function useNextPagePrefetch() {\n  const queryClient = useQueryClient();\n\n  const prefetchNextPage = useCallback(\n    (baseQueryKey: string[], currentPage: number, fetchFn: (page: number) => Promise<any>) => {\n      const nextPage = currentPage + 1;\n      const nextPageQueryKey = [...baseQueryKey, 'page', nextPage];\n\n      // Only prefetch if we don't already have the data\n      const existingData = queryClient.getQueryData(nextPageQueryKey);\n      if (!existingData) {\n        queryClient.prefetchQuery({\n          queryKey: nextPageQueryKey,\n          queryFn: () => fetchFn(nextPage),\n          staleTime: 2 * 60 * 1000, // 2 minutes for pagination\n        });\n      }\n    },\n    [queryClient]\n  );\n\n  return { prefetchNextPage };\n}\n\n// Hook for intelligent prefetching based on user behavior\nexport function useIntelligentPrefetch() {\n  const queryClient = useQueryClient();\n\n  // Prefetch related content based on current content\n  const prefetchRelatedContent = useCallback(\n    (contentType: 'album' | 'playlist' | 'blog', contentId: number) => {\n      // For albums, prefetch tracks and related albums\n      if (contentType === 'album') {\n        // Prefetch album tracks\n        queryClient.prefetchQuery({\n          queryKey: ['albumTracks', contentId],\n          queryFn: async () => {\n            const response = await fetch(`/api/albums/${contentId}/tracks`);\n            if (!response.ok) throw new Error('Failed to fetch tracks');\n            return response.json();\n          },\n          staleTime: 5 * 60 * 1000,\n        });\n\n        // Prefetch related albums (same genre/artist)\n        queryClient.prefetchQuery({\n          queryKey: ['relatedAlbums', contentId],\n          queryFn: async () => {\n            const response = await fetch(`/api/albums/${contentId}/related`);\n            if (!response.ok) throw new Error('Failed to fetch related albums');\n            return response.json();\n          },\n          staleTime: 10 * 60 * 1000,\n        });\n      }\n\n      // For blog posts, prefetch related posts and comments\n      if (contentType === 'blog') {\n        queryClient.prefetchQuery({\n          queryKey: ['blogComments', contentId],\n          queryFn: async () => {\n            const response = await fetch(`/api/blog/${contentId}/comments`);\n            if (!response.ok) throw new Error('Failed to fetch comments');\n            return response.json();\n          },\n          staleTime: 2 * 60 * 1000,\n        });\n      }\n    },\n    [queryClient]\n  );\n\n  return { prefetchRelatedContent };\n}\n"