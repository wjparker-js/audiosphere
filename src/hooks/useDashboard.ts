'use client';\n\nimport { useQuery } from '@tanstack/react-query';\n\n// Types for dashboard data\ninterface Album {\n  id: number;\n  title: string;\n  artist: string;\n  coverImage: string;\n  genre: string;\n  trackCount: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Playlist {\n  id: number;\n  name: string;\n  description: string | null;\n  isPublic: boolean;\n  userId: number;\n  trackCount: number;\n  ownerName: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Track {\n  id: number;\n  title: string;\n  artist: string;\n  albumTitle: string;\n  trackNumber: number;\n  duration: string;\n  durationSeconds: number;\n  filePath: string;\n  playCount: number;\n  status: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface BlogPost {\n  id: number;\n  title: string;\n  slug: string;\n  excerpt: string;\n  content: string;\n  featuredImageUrl: string | null;\n  status: string;\n  publishedAt: string | null;\n  viewCount: number;\n  createdAt: string;\n  updatedAt: string;\n  userId: number;\n  authorName: string;\n  commentCount: number;\n}\n\ninterface DashboardStats {\n  totalAlbums: number;\n  totalPlaylists: number;\n  totalTracks: number;\n  totalBlogPosts: number;\n  totalItems: number;\n}\n\ninterface DashboardData {\n  albums: Album[];\n  playlists: Playlist[];\n  tracks: Track[];\n  blogPosts: BlogPost[];\n  stats: DashboardStats;\n  meta: {\n    timestamp: string;\n    limits: {\n      albums: number;\n      playlists: number;\n      tracks: number;\n      blogPosts: number;\n    };\n  };\n}\n\n// Options for dashboard query\ninterface DashboardOptions {\n  albumLimit?: number;\n  playlistLimit?: number;\n  trackLimit?: number;\n  blogLimit?: number;\n  userId?: string;\n  enabled?: boolean;\n}\n\n// Fetch dashboard data\nasync function fetchDashboardData(options: DashboardOptions = {}): Promise<DashboardData> {\n  const {\n    albumLimit = 20,\n    playlistLimit = 20,\n    trackLimit = 10,\n    blogLimit = 10,\n    userId = '1'\n  } = options;\n\n  const params = new URLSearchParams({\n    albumLimit: albumLimit.toString(),\n    playlistLimit: playlistLimit.toString(),\n    trackLimit: trackLimit.toString(),\n    blogLimit: blogLimit.toString(),\n    userId\n  });\n\n  const response = await fetch(`/api/dashboard?${params}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch dashboard data');\n  }\n  \n  const result = await response.json();\n  return result.data;\n}\n\n// Hook for fetching consolidated dashboard data\nexport function useDashboard(options: DashboardOptions = {}) {\n  const {\n    albumLimit = 20,\n    playlistLimit = 20,\n    trackLimit = 10,\n    blogLimit = 10,\n    userId = '1',\n    enabled = true\n  } = options;\n\n  return useQuery({\n    queryKey: ['dashboard', { albumLimit, playlistLimit, trackLimit, blogLimit, userId }],\n    queryFn: () => fetchDashboardData(options),\n    enabled,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n  });\n}\n\n// Hook for fetching dashboard data with field selection (GraphQL-style)\nexport function useDashboardFields(fields: (keyof DashboardData)[], options: DashboardOptions = {}) {\n  const { data, ...rest } = useDashboard(options);\n\n  // Filter data to only include requested fields\n  const filteredData = data ? \n    Object.fromEntries(\n      Object.entries(data).filter(([key]) => fields.includes(key as keyof DashboardData))\n    ) as Partial<DashboardData> : undefined;\n\n  return {\n    data: filteredData,\n    ...rest\n  };\n}\n\n// Specialized hooks for individual data types (with caching benefits)\nexport function useDashboardAlbums(limit = 20) {\n  const { data, ...rest } = useDashboard({ albumLimit: limit, playlistLimit: 0, trackLimit: 0, blogLimit: 0 });\n  return {\n    data: data?.albums || [],\n    stats: data?.stats,\n    ...rest\n  };\n}\n\nexport function useDashboardPlaylists(limit = 20, userId = '1') {\n  const { data, ...rest } = useDashboard({ albumLimit: 0, playlistLimit: limit, trackLimit: 0, blogLimit: 0, userId });\n  return {\n    data: data?.playlists || [],\n    stats: data?.stats,\n    ...rest\n  };\n}\n\nexport function useDashboardTracks(limit = 10) {\n  const { data, ...rest } = useDashboard({ albumLimit: 0, playlistLimit: 0, trackLimit: limit, blogLimit: 0 });\n  return {\n    data: data?.tracks || [],\n    stats: data?.stats,\n    ...rest\n  };\n}\n\nexport function useDashboardBlogPosts(limit = 10) {\n  const { data, ...rest } = useDashboard({ albumLimit: 0, playlistLimit: 0, trackLimit: 0, blogLimit: limit });\n  return {\n    data: data?.blogPosts || [],\n    stats: data?.stats,\n    ...rest\n  };\n}\n\n// Hook for dashboard stats only\nexport function useDashboardStats() {\n  const { data, ...rest } = useDashboard({ albumLimit: 0, playlistLimit: 0, trackLimit: 0, blogLimit: 0 });\n  return {\n    data: data?.stats,\n    ...rest\n  };\n}\n"