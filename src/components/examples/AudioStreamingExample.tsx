'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useAudioPlayer } from '@/hooks/useAudioPlayer';\nimport { AudioTrack } from '@/lib/audio-processing';\nimport { \n  Play, \n  Pause, \n  SkipBack, \n  SkipForward, \n  Volume2, \n  VolumeX,\n  Settings,\n  Wifi,\n  WifiOff,\n  Activity,\n  BarChart3\n} from 'lucide-react';\n\n/**\n * Example component demonstrating audio streaming capabilities\n */\nexport function AudioStreamingExample() {\n  const [selectedDemo, setSelectedDemo] = useState<'player' | 'quality' | 'streaming' | 'analytics'>('player');\n  const [sampleTracks] = useState<AudioTrack[]>([\n    {\n      id: 1,\n      title: 'Sample Track 1',\n      artist: 'Demo Artist',\n      duration: 180,\n      sources: {\n        low: '/api/audio/stream/sample1.mp3?quality=low',\n        medium: '/api/audio/stream/sample1.mp3?quality=medium',\n        high: '/api/audio/stream/sample1.mp3?quality=high',\n        lossless: '/api/audio/stream/sample1.mp3?quality=lossless',\n      },\n      metadata: {\n        album: 'Demo Album',\n        year: 2024,\n        genre: 'Electronic',\n        artwork: 'https://picsum.photos/300/300?random=1',\n      },\n    },\n    {\n      id: 2,\n      title: 'Sample Track 2',\n      artist: 'Demo Artist',\n      duration: 210,\n      sources: {\n        low: '/api/audio/stream/sample2.mp3?quality=low',\n        medium: '/api/audio/stream/sample2.mp3?quality=medium',\n        high: '/api/audio/stream/sample2.mp3?quality=high',\n      },\n      metadata: {\n        album: 'Demo Album',\n        year: 2024,\n        genre: 'Ambient',\n        artwork: 'https://picsum.photos/300/300?random=2',\n      },\n    },\n  ]);\n\n  const {\n    currentTrack,\n    playerState,\n    isPlaying,\n    isLoading,\n    error,\n    play,\n    pause,\n    togglePlay,\n    seek,\n    setVolume,\n    setPlaybackRate,\n    loadTrack,\n    changeQuality,\n    getCurrentQuality,\n    enableCrossfade,\n    getBufferHealth,\n  } = useAudioPlayer({\n    enableCrossfade: true,\n    crossfadeDuration: 2000,\n    enableQualityAdaptation: true,\n    preloadNext: true,\n  });\n\n  const [bufferHealth, setBufferHealth] = useState({ buffered: 0, ahead: 0 });\n  const [crossfadeEnabled, setCrossfadeEnabled] = useState(true);\n  const [selectedQuality, setSelectedQuality] = useState<keyof AudioTrack['sources']>('medium');\n\n  // Update buffer health periodically\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setBufferHealth(getBufferHealth());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [getBufferHealth]);\n\n  const handleLoadTrack = async (track: AudioTrack) => {\n    await loadTrack(track, false);\n  };\n\n  const handleQualityChange = async (quality: keyof AudioTrack['sources']) => {\n    setSelectedQuality(quality);\n    if (currentTrack) {\n      await changeQuality(quality);\n    }\n  };\n\n  const handleCrossfadeToggle = (enabled: boolean) => {\n    setCrossfadeEnabled(enabled);\n    enableCrossfade(enabled, 2000);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getQualityColor = (quality: string) => {\n    switch (quality) {\n      case 'low': return 'text-red-500';\n      case 'medium': return 'text-yellow-500';\n      case 'high': return 'text-green-500';\n      case 'lossless': return 'text-blue-500';\n      default: return 'text-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg max-w-6xl mx-auto\">\n      <h2 className=\"text-2xl font-bold mb-6 text-gray-900 dark:text-white\">\n        Audio Streaming Examples\n      </h2>\n\n      {/* Demo Selection */}\n      <div className=\"mb-6\">\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {[\n            { key: 'player', label: 'Audio Player', icon: Play },\n            { key: 'quality', label: 'Quality Control', icon: Settings },\n            { key: 'streaming', label: 'Streaming Features', icon: Wifi },\n            { key: 'analytics', label: 'Analytics', icon: BarChart3 },\n          ].map(({ key, label, icon: Icon }) => (\n            <button\n              key={key}\n              onClick={() => setSelectedDemo(key as any)}\n              className={`\n                flex items-center gap-2 px-4 py-2 rounded-lg transition-colors\n                ${selectedDemo === key\n                  ? 'bg-orange-500 text-white'\n                  : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'\n                }\n              `}\n            >\n              <Icon className=\"w-4 h-4\" />\n              {label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Audio Player Demo */}\n      {selectedDemo === 'player' && (\n        <div className=\"space-y-6\">\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">\n            Advanced Audio Player\n          </h3>\n          \n          {/* Track Selection */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {sampleTracks.map((track) => (\n              <div\n                key={track.id}\n                className={`\n                  p-4 border rounded-lg cursor-pointer transition-colors\n                  ${currentTrack?.id === track.id\n                    ? 'border-orange-500 bg-orange-50 dark:bg-orange-900/20'\n                    : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\n                  }\n                `}\n                onClick={() => handleLoadTrack(track)}\n              >\n                <div className=\"flex items-center gap-3\">\n                  <img\n                    src={track.metadata?.artwork}\n                    alt={track.title}\n                    className=\"w-12 h-12 rounded-lg object-cover\"\n                  />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-gray-900 dark:text-white\">\n                      {track.title}\n                    </h4>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {track.artist} â€¢ {formatTime(track.duration)}\n                    </p>\n                  </div>\n                  {currentTrack?.id === track.id && (\n                    <div className=\"text-orange-500\">\n                      <Activity className=\"w-4 h-4\" />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Player Controls */}\n          {currentTrack && (\n            <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-6\">\n              <div className=\"flex items-center gap-4 mb-4\">\n                <img\n                  src={currentTrack.metadata?.artwork}\n                  alt={currentTrack.title}\n                  className=\"w-16 h-16 rounded-lg object-cover\"\n                />\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold text-gray-900 dark:text-white\">\n                    {currentTrack.title}\n                  </h4>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    {currentTrack.artist}\n                  </p>\n                </div>\n                <div className={`text-sm font-medium ${getQualityColor(getCurrentQuality())}`}>\n                  {getCurrentQuality().toUpperCase()}\n                </div>\n              </div>\n\n              {/* Progress Bar */}\n              <div className=\"mb-4\">\n                <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400 mb-1\">\n                  <span>{formatTime(playerState.currentTime)}</span>\n                  <span>/</span>\n                  <span>{formatTime(playerState.duration)}</span>\n                </div>\n                <div className=\"relative\">\n                  <input\n                    type=\"range\"\n                    min={0}\n                    max={playerState.duration || 100}\n                    value={playerState.currentTime}\n                    onChange={(e) => seek(parseFloat(e.target.value))}\n                    className=\"w-full h-2 bg-gray-200 dark:bg-gray-600 rounded-lg appearance-none cursor-pointer\"\n                  />\n                  {/* Buffer indicator */}\n                  <div\n                    className=\"absolute top-0 h-2 bg-gray-300 dark:bg-gray-500 rounded-lg pointer-events-none\"\n                    style={{\n                      width: `${(bufferHealth.buffered / playerState.duration) * 100}%`,\n                    }}\n                  />\n                </div>\n              </div>\n\n              {/* Control Buttons */}\n              <div className=\"flex items-center justify-center gap-4 mb-4\">\n                <button className=\"p-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200\">\n                  <SkipBack className=\"w-5 h-5\" />\n                </button>\n                \n                <button\n                  onClick={togglePlay}\n                  disabled={isLoading}\n                  className=\"p-3 bg-orange-500 text-white rounded-full hover:bg-orange-600 disabled:opacity-50 transition-colors\"\n                >\n                  {isLoading ? (\n                    <div className=\"w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                  ) : isPlaying ? (\n                    <Pause className=\"w-6 h-6\" />\n                  ) : (\n                    <Play className=\"w-6 h-6\" />\n                  )}\n                </button>\n                \n                <button className=\"p-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200\">\n                  <SkipForward className=\"w-5 h-5\" />\n                </button>\n              </div>\n\n              {/* Volume Control */}\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={() => setVolume(playerState.muted ? 0.7 : 0)}\n                  className=\"text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200\"\n                >\n                  {playerState.muted || playerState.volume === 0 ? (\n                    <VolumeX className=\"w-5 h-5\" />\n                  ) : (\n                    <Volume2 className=\"w-5 h-5\" />\n                  )}\n                </button>\n                \n                <input\n                  type=\"range\"\n                  min={0}\n                  max={1}\n                  step={0.01}\n                  value={playerState.volume}\n                  onChange={(e) => setVolume(parseFloat(e.target.value))}\n                  className=\"flex-1 h-2 bg-gray-200 dark:bg-gray-600 rounded-lg appearance-none cursor-pointer\"\n                />\n                \n                <span className=\"text-sm text-gray-600 dark:text-gray-400 w-12\">\n                  {Math.round(playerState.volume * 100)}%\n                </span>\n              </div>\n\n              {/* Error Display */}\n              {error && (\n                <div className=\"mt-4 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg\">\n                  <p className=\"text-red-800 dark:text-red-200 text-sm\">\n                    Error: {error}\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Quality Control Demo */}\n      {selectedDemo === 'quality' && (\n        <div className=\"space-y-6\">\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">\n            Audio Quality Control\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-700 dark:text-gray-300\">\n                Quality Settings\n              </h4>\n              \n              <div className=\"space-y-2\">\n                {(['low', 'medium', 'high', 'lossless'] as const).map((quality) => (\n                  <button\n                    key={quality}\n                    onClick={() => handleQualityChange(quality)}\n                    className={`\n                      w-full p-3 text-left rounded-lg border transition-colors\n                      ${selectedQuality === quality\n                        ? 'border-orange-500 bg-orange-50 dark:bg-orange-900/20'\n                        : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\n                      }\n                    `}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className={`font-medium ${getQualityColor(quality)}`}>\n                          {quality.charAt(0).toUpperCase() + quality.slice(1)}\n                        </div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {quality === 'low' && '128 kbps - Smaller file size'}\n                          {quality === 'medium' && '256 kbps - Balanced quality'}\n                          {quality === 'high' && '320 kbps - High quality'}\n                          {quality === 'lossless' && '1411 kbps - Studio quality'}\n                        </div>\n                      </div>\n                      {selectedQuality === quality && (\n                        <div className=\"w-2 h-2 bg-orange-500 rounded-full\" />\n                      )}\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-700 dark:text-gray-300\">\n                Advanced Settings\n              </h4>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                  <div>\n                    <div className=\"font-medium text-gray-900 dark:text-white\">\n                      Crossfade\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      Smooth transitions between tracks\n                    </div>\n                  </div>\n                  <button\n                    onClick={() => handleCrossfadeToggle(!crossfadeEnabled)}\n                    className={`\n                      relative w-12 h-6 rounded-full transition-colors\n                      ${crossfadeEnabled ? 'bg-orange-500' : 'bg-gray-300 dark:bg-gray-600'}\n                    `}\n                  >\n                    <div\n                      className={`\n                        absolute top-1 w-4 h-4 bg-white rounded-full transition-transform\n                        ${crossfadeEnabled ? 'translate-x-7' : 'translate-x-1'}\n                      `}\n                    />\n                  </button>\n                </div>\n                \n                <div className=\"p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-medium text-gray-900 dark:text-white\">\n                      Playback Speed\n                    </span>\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {playerState.playbackRate}x\n                    </span>\n                  </div>\n                  <input\n                    type=\"range\"\n                    min={0.5}\n                    max={2}\n                    step={0.1}\n                    value={playerState.playbackRate}\n                    onChange={(e) => setPlaybackRate(parseFloat(e.target.value))}\n                    className=\"w-full h-2 bg-gray-200 dark:bg-gray-600 rounded-lg appearance-none cursor-pointer\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Streaming Features Demo */}\n      {selectedDemo === 'streaming' && (\n        <div className=\"space-y-6\">\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">\n            Streaming Features\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Wifi className=\"w-5 h-5 text-blue-500\" />\n                <h4 className=\"font-semibold text-blue-800 dark:text-blue-200\">\n                  Adaptive Streaming\n                </h4>\n              </div>\n              <ul className=\"text-sm text-blue-700 dark:text-blue-300 space-y-1\">\n                <li>â€¢ Automatic quality adjustment</li>\n                <li>â€¢ Network condition monitoring</li>\n                <li>â€¢ Seamless quality switching</li>\n                <li>â€¢ Bandwidth optimization</li>\n              </ul>\n            </div>\n            \n            <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Activity className=\"w-5 h-5 text-green-500\" />\n                <h4 className=\"font-semibold text-green-800 dark:text-green-200\">\n                  Buffer Management\n                </h4>\n              </div>\n              <div className=\"text-sm text-green-700 dark:text-green-300 space-y-2\">\n                <div>Buffered: {bufferHealth.buffered.toFixed(1)}s</div>\n                <div>Ahead: {bufferHealth.ahead.toFixed(1)}s</div>\n                <div className=\"w-full bg-green-200 dark:bg-green-800 rounded-full h-2\">\n                  <div\n                    className=\"bg-green-500 h-2 rounded-full transition-all\"\n                    style={{ width: `${Math.min(100, (bufferHealth.ahead / 30) * 100)}%` }}\n                  />\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Settings className=\"w-5 h-5 text-purple-500\" />\n                <h4 className=\"font-semibold text-purple-800 dark:text-purple-200\">\n                  Advanced Features\n                </h4>\n              </div>\n              <ul className=\"text-sm text-purple-700 dark:text-purple-300 space-y-1\">\n                <li>â€¢ Range request support</li>\n                <li>â€¢ Audio preloading</li>\n                <li>â€¢ Crossfade transitions</li>\n                <li>â€¢ Format optimization</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Analytics Demo */}\n      {selectedDemo === 'analytics' && (\n        <div className=\"space-y-6\">\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">\n            Streaming Analytics\n          </h3>\n          \n          <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-6\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n              <div>\n                <div className=\"text-2xl font-bold text-orange-500\">\n                  {getCurrentQuality().toUpperCase()}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Current Quality\n                </div>\n              </div>\n              \n              <div>\n                <div className=\"text-2xl font-bold text-blue-500\">\n                  {bufferHealth.ahead.toFixed(1)}s\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Buffer Ahead\n                </div>\n              </div>\n              \n              <div>\n                <div className=\"text-2xl font-bold text-green-500\">\n                  {Math.round(playerState.playbackRate * 100)}%\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Playback Rate\n                </div>\n              </div>\n              \n              <div>\n                <div className=\"text-2xl font-bold text-purple-500\">\n                  {Math.round(playerState.volume * 100)}%\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Volume Level\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AudioStreamingExample;\n"}