'use client';\n\nimport React, { useState } from 'react';\nimport { OptimizedImage } from '@/components/ui/optimized-image';\nimport { ProgressiveLoader } from '@/components/ui/progressive-loader';\nimport { imagePreloadService } from '@/services/image-preload.service';\nimport { IMAGE_CONFIGS } from '@/lib/image-optimization';\nimport { Download, Eye, Settings, Zap } from 'lucide-react';\n\n/**\n * Example component demonstrating image optimization features\n */\nexport function ImageOptimizationExample() {\n  const [selectedDemo, setSelectedDemo] = useState<'basic' | 'progressive' | 'lazy' | 'preload'>('basic');\n  const [preloadStats, setPreloadStats] = useState(imagePreloadService.getCacheStats());\n\n  // Sample images for demonstration\n  const sampleImages = [\n    {\n      src: 'https://picsum.photos/800/600?random=1',\n      alt: 'Sample Album Cover 1',\n      title: 'Album Cover Example',\n    },\n    {\n      src: 'https://picsum.photos/400/400?random=2',\n      alt: 'Sample Avatar',\n      title: 'Avatar Example',\n    },\n    {\n      src: 'https://picsum.photos/1200/800?random=3',\n      alt: 'Sample Blog Image',\n      title: 'Blog Featured Image',\n    },\n    {\n      src: 'https://picsum.photos/200/200?random=4',\n      alt: 'Sample Thumbnail',\n      title: 'Thumbnail Example',\n    },\n  ];\n\n  const handlePreloadAll = () => {\n    const sources = sampleImages.map(img => img.src);\n    imagePreloadService.preloadMultiple(sources, { priority: 'high' });\n    \n    // Update stats after a short delay\n    setTimeout(() => {\n      setPreloadStats(imagePreloadService.getCacheStats());\n    }, 1000);\n  };\n\n  const handleClearCache = () => {\n    imagePreloadService.clearCache();\n    setPreloadStats(imagePreloadService.getCacheStats());\n  };\n\n  return (\n    <div className=\"p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg max-w-6xl mx-auto\">\n      <h2 className=\"text-2xl font-bold mb-6 text-gray-900 dark:text-white\">\n        Image Optimization Examples\n      </h2>\n\n      {/* Demo Selection */}\n      <div className=\"mb-6\">\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {[\n            { key: 'basic', label: 'Basic Optimization', icon: Settings },\n            { key: 'progressive', label: 'Progressive Loading', icon: Download },\n            { key: 'lazy', label: 'Lazy Loading', icon: Eye },\n            { key: 'preload', label: 'Preloading', icon: Zap },\n          ].map(({ key, label, icon: Icon }) => (\n            <button\n              key={key}\n              onClick={() => setSelectedDemo(key as any)}\n              className={`\n                flex items-center gap-2 px-4 py-2 rounded-lg transition-colors\n                ${selectedDemo === key\n                  ? 'bg-orange-500 text-white'\n                  : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'\n                }\n              `}\n            >\n              <Icon className=\"w-4 h-4\" />\n              {label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Basic Optimization Demo */}\n      {selectedDemo === 'basic' && (\n        <div className=\"space-y-6\">\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">\n            Basic Image Optimization\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {sampleImages.map((image, index) => {\n              const configKey = index === 0 ? 'albumCover' : index === 1 ? 'avatar' : index === 2 ? 'blogFeatured' : 'thumbnail';\n              const config = IMAGE_CONFIGS[configKey];\n              \n              return (\n                <div key={index} className=\"space-y-2\">\n                  <OptimizedImage\n                    src={image.src}\n                    alt={image.alt}\n                    width={index === 0 ? 300 : index === 1 ? 100 : index === 2 ? 400 : 150}\n                    height={index === 0 ? 300 : index === 1 ? 100 : index === 2 ? 200 : 150}\n                    quality={config.quality}\n                    sizes={config.sizes}\n                    className=\"rounded-lg shadow-md\"\n                    priority={index === 0}\n                  />\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    <p className=\"font-medium\">{image.title}</p>\n                    <p>Quality: {config.quality}%</p>\n                    <p>Format: {config.format}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          \n          <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n            <h4 className=\"font-semibold text-blue-800 dark:text-blue-200 mb-2\">\n              Optimization Features:\n            </h4>\n            <ul className=\"text-sm text-blue-700 dark:text-blue-300 space-y-1\">\n              <li>• Automatic WebP/AVIF format conversion</li>\n              <li>• Responsive image sizing based on viewport</li>\n              <li>• Quality optimization per use case</li>\n              <li>• Lazy loading for better performance</li>\n              <li>• Blur placeholder during loading</li>\n            </ul>\n          </div>\n        </div>\n      )}\n\n      {/* Progressive Loading Demo */}\n      {selectedDemo === 'progressive' && (\n        <div className=\"space-y-6\">\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">\n            Progressive Loading with Smooth Transitions\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {sampleImages.slice(0, 2).map((image, index) => (\n              <div key={index} className=\"space-y-2\">\n                <ProgressiveLoader\n                  src={`${image.src}&t=${Date.now()}`} // Force reload for demo\n                  alt={image.alt}\n                  width={400}\n                  height={300}\n                  className=\"rounded-lg shadow-md\"\n                  showProgress={true}\n                  fadeInDuration={500}\n                  aspectRatio=\"4/3\"\n                />\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 font-medium\">\n                  {image.title} - Progressive Loading\n                </p>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n            <h4 className=\"font-semibold text-green-800 dark:text-green-200 mb-2\">\n              Progressive Loading Features:\n            </h4>\n            <ul className=\"text-sm text-green-700 dark:text-green-300 space-y-1\">\n              <li>• Smooth fade-in transitions</li>\n              <li>• Loading progress indicators</li>\n              <li>• Shimmer animation effects</li>\n              <li>• Error state handling</li>\n              <li>• Customizable loading duration</li>\n            </ul>\n          </div>\n        </div>\n      )}\n\n      {/* Lazy Loading Demo */}\n      {selectedDemo === 'lazy' && (\n        <div className=\"space-y-6\">\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">\n            Lazy Loading with Intersection Observer\n          </h3>\n          \n          <div className=\"space-y-8\">\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Scroll down to see images load as they come into view:\n            </p>\n            \n            {Array.from({ length: 8 }, (_, index) => (\n              <div key={index} className=\"space-y-2\">\n                <OptimizedImage\n                  src={`https://picsum.photos/600/400?random=${index + 10}`}\n                  alt={`Lazy loaded image ${index + 1}`}\n                  width={600}\n                  height={400}\n                  className=\"rounded-lg shadow-md mx-auto\"\n                  lazyLoad={true}\n                  priority={false}\n                />\n                <p className=\"text-center text-sm text-gray-600 dark:text-gray-400\">\n                  Image {index + 1} - Lazy Loaded\n                </p>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg p-4\">\n            <h4 className=\"font-semibold text-purple-800 dark:text-purple-200 mb-2\">\n              Lazy Loading Benefits:\n            </h4>\n            <ul className=\"text-sm text-purple-700 dark:text-purple-300 space-y-1\">\n              <li>• Faster initial page load</li>\n              <li>• Reduced bandwidth usage</li>\n              <li>• Better Core Web Vitals scores</li>\n              <li>• Intersection Observer API</li>\n              <li>• Configurable load triggers</li>\n            </ul>\n          </div>\n        </div>\n      )}\n\n      {/* Preloading Demo */}\n      {selectedDemo === 'preload' && (\n        <div className=\"space-y-6\">\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">\n            Intelligent Image Preloading\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-700 dark:text-gray-300\">\n                Preload Controls\n              </h4>\n              \n              <div className=\"space-y-2\">\n                <button\n                  onClick={handlePreloadAll}\n                  className=\"w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors\"\n                >\n                  Preload All Images\n                </button>\n                \n                <button\n                  onClick={handleClearCache}\n                  className=\"w-full px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors\"\n                >\n                  Clear Cache\n                </button>\n              </div>\n              \n              <div className=\"bg-gray-100 dark:bg-gray-700 rounded-lg p-4\">\n                <h5 className=\"font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Cache Statistics\n                </h5>\n                <div className=\"space-y-1 text-sm text-gray-600 dark:text-gray-400\">\n                  <p>Cached Images: {preloadStats.cached}</p>\n                  <p>Currently Loading: {preloadStats.loading}</p>\n                  <p>Queued for Loading: {preloadStats.queued}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-700 dark:text-gray-300\">\n                Sample Images\n              </h4>\n              \n              <div className=\"grid grid-cols-2 gap-2\">\n                {sampleImages.map((image, index) => (\n                  <OptimizedImage\n                    key={index}\n                    src={image.src}\n                    alt={image.alt}\n                    width={150}\n                    height={150}\n                    className=\"rounded-lg shadow-sm\"\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800 rounded-lg p-4\">\n            <h4 className=\"font-semibold text-orange-800 dark:text-orange-200 mb-2\">\n              Preloading Strategies:\n            </h4>\n            <ul className=\"text-sm text-orange-700 dark:text-orange-300 space-y-1\">\n              <li>• Priority-based loading queue</li>\n              <li>• Hover-triggered preloading</li>\n              <li>• Viewport-based intelligent loading</li>\n              <li>• Route-based prefetching</li>\n              <li>• Cache management and cleanup</li>\n            </ul>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ImageOptimizationExample;\n"}