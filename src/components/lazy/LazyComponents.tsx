'use client';\n\nimport React, { Suspense } from 'react';\nimport { LoadingState } from '@/components/ui/loading-state';\n\n// Lazy load heavy components\nexport const LazyMusicPlayer = React.lazy(() => \n  import('@/components/music/MusicPlayer').then(module => ({ default: module.MusicPlayer }))\n);\n\nexport const LazyBlogEditor = React.lazy(() => \n  import('@/components/blog/BlogEditor').then(module => ({ default: module.BlogEditor }))\n);\n\nexport const LazyAlbumUpload = React.lazy(() => \n  import('@/components/admin/AlbumUpload').then(module => ({ default: module.AlbumUpload }))\n);\n\nexport const LazyTrackUpload = React.lazy(() => \n  import('@/components/admin/TrackUpload').then(module => ({ default: module.TrackUpload }))\n);\n\nexport const LazyAnalyticsDashboard = React.lazy(() => \n  import('@/components/admin/AnalyticsDashboard').then(module => ({ default: module.AnalyticsDashboard }))\n);\n\nexport const LazyUserProfile = React.lazy(() => \n  import('@/components/user/UserProfile').then(module => ({ default: module.UserProfile }))\n);\n\n// Wrapper components with Suspense and loading states\ninterface LazyWrapperProps {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n  loadingType?: 'spinner' | 'skeleton' | 'card' | 'list';\n  loadingCount?: number;\n}\n\nexport const LazyWrapper = ({ \n  children, \n  fallback, \n  loadingType = 'spinner',\n  loadingCount = 1 \n}: LazyWrapperProps) => {\n  const defaultFallback = fallback || (\n    <LoadingState \n      count={loadingCount} \n      type={loadingType} \n    />\n  );\n\n  return (\n    <Suspense fallback={defaultFallback}>\n      {children}\n    </Suspense>\n  );\n};\n\n// Specific lazy wrappers for common components\nexport const LazyMusicPlayerWrapper = ({ children }: { children: React.ReactNode }) => (\n  <LazyWrapper loadingType=\"card\" loadingCount={1}>\n    {children}\n  </LazyWrapper>\n);\n\nexport const LazyBlogEditorWrapper = ({ children }: { children: React.ReactNode }) => (\n  <LazyWrapper loadingType=\"skeleton\" loadingCount={3}>\n    {children}\n  </LazyWrapper>\n);\n\nexport const LazyAdminWrapper = ({ children }: { children: React.ReactNode }) => (\n  <LazyWrapper loadingType=\"card\" loadingCount={2}>\n    {children}\n  </LazyWrapper>\n);\n\nexport const LazyProfileWrapper = ({ children }: { children: React.ReactNode }) => (\n  <LazyWrapper loadingType=\"skeleton\" loadingCount={4}>\n    {children}\n  </LazyWrapper>\n);\n"