'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { OptimizedImage } from './optimized-image';\nimport { imagePreloadService } from '@/services/image-preload.service';\n\ninterface ProgressiveLoaderProps {\n  src: string;\n  alt: string;\n  width?: number;\n  height?: number;\n  className?: string;\n  placeholderSrc?: string;\n  quality?: number;\n  priority?: boolean;\n  sizes?: string;\n  fill?: boolean;\n  objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';\n  aspectRatio?: string;\n  showProgress?: boolean;\n  fadeInDuration?: number;\n  onLoad?: () => void;\n  onError?: () => void;\n}\n\n/**\n * Progressive image loader with smooth transitions and loading states\n */\nexport function ProgressiveLoader({\n  src,\n  alt,\n  width,\n  height,\n  className = '',\n  placeholderSrc,\n  quality = 75,\n  priority = false,\n  sizes,\n  fill = false,\n  objectFit = 'cover',\n  aspectRatio,\n  showProgress = true,\n  fadeInDuration = 300,\n  onLoad,\n  onError,\n}: ProgressiveLoaderProps) {\n  const [loadingState, setLoadingState] = useState<'loading' | 'loaded' | 'error'>('loading');\n  const [progress, setProgress] = useState(0);\n  const [showPlaceholder, setShowPlaceholder] = useState(true);\n\n  // Simulate loading progress for better UX\n  useEffect(() => {\n    if (loadingState === 'loading' && showProgress) {\n      const interval = setInterval(() => {\n        setProgress(prev => {\n          if (prev >= 90) {\n            clearInterval(interval);\n            return 90; // Stop at 90% until actual load\n          }\n          return prev + Math.random() * 15;\n        });\n      }, 100);\n\n      return () => clearInterval(interval);\n    }\n  }, [loadingState, showProgress]);\n\n  // Preload image for better performance\n  useEffect(() => {\n    if (priority) {\n      imagePreloadService.preload(src, {\n        priority: 'high',\n        onLoad: () => {\n          setLoadingState('loaded');\n          setProgress(100);\n          setTimeout(() => setShowPlaceholder(false), fadeInDuration / 2);\n          onLoad?.();\n        },\n        onError: (error) => {\n          setLoadingState('error');\n          onError?.();\n        },\n      });\n    }\n  }, [src, priority, fadeInDuration, onLoad, onError]);\n\n  const handleImageLoad = () => {\n    setLoadingState('loaded');\n    setProgress(100);\n    setTimeout(() => setShowPlaceholder(false), fadeInDuration / 2);\n    onLoad?.();\n  };\n\n  const handleImageError = () => {\n    setLoadingState('error');\n    onError?.();\n  };\n\n  const containerClasses = [\n    'relative overflow-hidden',\n    aspectRatio && `aspect-[${aspectRatio}]`,\n    className,\n  ].filter(Boolean).join(' ');\n\n  return (\n    <div className={containerClasses}>\n      {/* Placeholder/Loading State */}\n      {showPlaceholder && (\n        <div \n          className=\"absolute inset-0 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-900 transition-opacity duration-300\"\n          style={{\n            opacity: loadingState === 'loaded' ? 0 : 1,\n            transitionDuration: `${fadeInDuration}ms`,\n          }}\n        >\n          {/* Animated placeholder content */}\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            {loadingState === 'loading' ? (\n              <div className=\"text-center\">\n                {/* Loading spinner */}\n                <div className=\"w-8 h-8 border-2 border-gray-300 border-t-orange-500 rounded-full animate-spin mx-auto mb-2\"></div>\n                \n                {/* Progress bar */}\n                {showProgress && (\n                  <div className=\"w-24 h-1 bg-gray-300 dark:bg-gray-600 rounded-full overflow-hidden\">\n                    <div \n                      className=\"h-full bg-orange-500 transition-all duration-300 ease-out\"\n                      style={{ width: `${progress}%` }}\n                    ></div>\n                  </div>\n                )}\n                \n                {/* Loading text */}\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\n                  Loading...\n                </p>\n              </div>\n            ) : loadingState === 'error' ? (\n              <div className=\"text-center text-gray-500 dark:text-gray-400\">\n                {/* Error icon */}\n                <svg\n                  className=\"w-8 h-8 mx-auto mb-2\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n                <p className=\"text-xs\">Failed to load</p>\n              </div>\n            ) : (\n              // Placeholder image icon\n              <svg\n                className=\"w-12 h-12 text-gray-400 dark:text-gray-500\"\n                fill=\"currentColor\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            )}\n          </div>\n          \n          {/* Shimmer effect */}\n          <div className=\"absolute inset-0 -skew-x-12 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-shimmer\"></div>\n        </div>\n      )}\n\n      {/* Actual Image */}\n      <div\n        className=\"transition-opacity duration-300\"\n        style={{\n          opacity: loadingState === 'loaded' ? 1 : 0,\n          transitionDuration: `${fadeInDuration}ms`,\n        }}\n      >\n        <OptimizedImage\n          src={src}\n          alt={alt}\n          width={width}\n          height={height}\n          quality={quality}\n          priority={priority}\n          sizes={sizes}\n          fill={fill}\n          objectFit={objectFit}\n          className=\"w-full h-full\"\n          onLoad={handleImageLoad}\n          onError={handleImageError}\n          fallbackSrc={placeholderSrc}\n          lazyLoad={!priority}\n        />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Shimmer animation keyframes (add to global CSS)\n */\nexport const shimmerKeyframes = `\n@keyframes shimmer {\n  0% {\n    transform: translateX(-100%) skewX(-12deg);\n  }\n  100% {\n    transform: translateX(200%) skewX(-12deg);\n  }\n}\n\n.animate-shimmer {\n  animation: shimmer 2s infinite;\n}\n`;\n\nexport default ProgressiveLoader;\n"}