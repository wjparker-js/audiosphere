'use client';\n\nimport React, { useRef, useEffect, useState, useMemo } from 'react';\nimport { FixedSizeGrid as Grid } from 'react-window';\nimport { ContentCard } from '@/components/library/ContentCard';\nimport { ContentItem, ContentAction } from '@/types/library';\n\ninterface VirtualizedGridProps {\n  items: ContentItem[];\n  onAction: (action: ContentAction, content: ContentItem) => void;\n  loading?: boolean;\n  error?: string | null;\n  onRetry?: () => void;\n  minItemWidth?: number;\n  itemHeight?: number;\n  gap?: number;\n}\n\nconst VirtualizedGridComponent = ({\n  items,\n  onAction,\n  loading = false,\n  error = null,\n  onRetry,\n  minItemWidth = 200,\n  itemHeight = 280,\n  gap = 16\n}: VirtualizedGridProps) => {\n  const [gridDimensions, setGridDimensions] = useState({\n    width: 0,\n    height: 400,\n    columnCount: 1,\n    rowCount: 1\n  });\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Calculate grid dimensions based on container size and items\n  useEffect(() => {\n    const updateDimensions = () => {\n      if (containerRef.current && items.length > 0) {\n        const containerWidth = containerRef.current.offsetWidth;\n        const availableWidth = containerWidth - gap;\n        \n        // Calculate how many columns can fit\n        const columnCount = Math.max(1, Math.floor(availableWidth / (minItemWidth + gap)));\n        const rowCount = Math.ceil(items.length / columnCount);\n        \n        // Calculate optimal height (max 70% of viewport height)\n        const maxHeight = window.innerHeight * 0.7;\n        const calculatedHeight = Math.min(rowCount * (itemHeight + gap), maxHeight);\n        \n        setGridDimensions({\n          width: containerWidth,\n          height: calculatedHeight,\n          columnCount,\n          rowCount\n        });\n      }\n    };\n\n    updateDimensions();\n    \n    // Update dimensions on window resize\n    const handleResize = () => {\n      setTimeout(updateDimensions, 100); // Debounce resize events\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [items.length, minItemWidth, itemHeight, gap]);\n\n  // Memoize items for performance\n  const gridItems = useMemo(() => items, [items]);\n\n  // If we have fewer than 12 items, don't use virtualization\n  if (items.length < 12) {\n    return (\n      <div \n        className=\"grid gap-4 auto-fit-grid\"\n        style={{\n          gridTemplateColumns: `repeat(auto-fit, minmax(${minItemWidth}px, 1fr))`\n        }}\n      >\n        {items.map((item) => (\n          <ContentCard\n            key={`${item.type}-${item.id}`}\n            content={item}\n            onAction={onAction}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  // Cell renderer for virtualized grid\n  const Cell = ({ columnIndex, rowIndex, style }: {\n    columnIndex: number;\n    rowIndex: number;\n    style: React.CSSProperties;\n  }) => {\n    const itemIndex = rowIndex * gridDimensions.columnCount + columnIndex;\n    const item = gridItems[itemIndex];\n\n    if (!item) {\n      return <div style={style} />;\n    }\n\n    return (\n      <div \n        style={{\n          ...style,\n          padding: gap / 2,\n          left: (style.left as number) + gap / 2,\n          top: (style.top as number) + gap / 2,\n          width: (style.width as number) - gap,\n          height: (style.height as number) - gap,\n        }}\n      >\n        <ContentCard\n          content={item}\n          onAction={onAction}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div ref={containerRef} className=\"w-full\">\n      {gridDimensions.width > 0 && (\n        <Grid\n          columnCount={gridDimensions.columnCount}\n          columnWidth={(gridDimensions.width - gap) / gridDimensions.columnCount}\n          height={gridDimensions.height}\n          rowCount={gridDimensions.rowCount}\n          rowHeight={itemHeight + gap}\n          width={gridDimensions.width}\n        >\n          {Cell}\n        </Grid>\n      )}\n    </div>\n  );\n};\n\n// Memoize the component to prevent unnecessary re-renders\nexport const VirtualizedGrid = React.memo(VirtualizedGridComponent);\n"