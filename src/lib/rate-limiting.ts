import rateLimit from 'express-rate-limit';\nimport { NextRequest, NextResponse } from 'next/server';\n\n// Rate limiting configurations for different endpoint types\nexport const rateLimitConfigs = {\n  // Authentication endpoints - stricter limits\n  auth: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 5, // 5 attempts per window\n    message: {\n      success: false,\n      error: {\n        code: 'RATE_LIMIT_EXCEEDED',\n        message: 'Too many authentication attempts. Please try again in 15 minutes.',\n        retryAfter: 15 * 60 // seconds\n      }\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n    skipSuccessfulRequests: true, // Don't count successful requests\n  },\n\n  // File upload endpoints - moderate limits\n  upload: {\n    windowMs: 60 * 1000, // 1 minute\n    max: 10, // 10 uploads per minute\n    message: {\n      success: false,\n      error: {\n        code: 'UPLOAD_RATE_LIMIT_EXCEEDED',\n        message: 'Too many file uploads. Please wait before uploading again.',\n        retryAfter: 60\n      }\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n  },\n\n  // General API endpoints - generous limits\n  api: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // 100 requests per window\n    message: {\n      success: false,\n      error: {\n        code: 'API_RATE_LIMIT_EXCEEDED',\n        message: 'Too many API requests. Please try again later.',\n        retryAfter: 15 * 60\n      }\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n  },\n\n  // Search endpoints - moderate limits\n  search: {\n    windowMs: 60 * 1000, // 1 minute\n    max: 30, // 30 searches per minute\n    message: {\n      success: false,\n      error: {\n        code: 'SEARCH_RATE_LIMIT_EXCEEDED',\n        message: 'Too many search requests. Please wait before searching again.',\n        retryAfter: 60\n      }\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n  },\n\n  // Password reset endpoints - very strict\n  passwordReset: {\n    windowMs: 60 * 60 * 1000, // 1 hour\n    max: 3, // 3 attempts per hour\n    message: {\n      success: false,\n      error: {\n        code: 'PASSWORD_RESET_RATE_LIMIT_EXCEEDED',\n        message: 'Too many password reset attempts. Please try again in 1 hour.',\n        retryAfter: 60 * 60\n      }\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n  },\n\n  // Comment/blog posting - moderate limits\n  posting: {\n    windowMs: 5 * 60 * 1000, // 5 minutes\n    max: 20, // 20 posts per 5 minutes\n    message: {\n      success: false,\n      error: {\n        code: 'POSTING_RATE_LIMIT_EXCEEDED',\n        message: 'Too many posts. Please wait before posting again.',\n        retryAfter: 5 * 60\n      }\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n  },\n};\n\n// Create rate limiter instances\nexport const authLimiter = rateLimit(rateLimitConfigs.auth);\nexport const uploadLimiter = rateLimit(rateLimitConfigs.upload);\nexport const apiLimiter = rateLimit(rateLimitConfigs.api);\nexport const searchLimiter = rateLimit(rateLimitConfigs.search);\nexport const passwordResetLimiter = rateLimit(rateLimitConfigs.passwordReset);\nexport const postingLimiter = rateLimit(rateLimitConfigs.posting);\n\n// Custom rate limiter for Next.js API routes\nexport function createRateLimiter(config: typeof rateLimitConfigs.api) {\n  const limiter = rateLimit(config);\n  \n  return async (req: NextRequest) => {\n    return new Promise<NextResponse | null>((resolve) => {\n      // Convert NextRequest to Express-like request object\n      const expressReq = {\n        ip: req.ip || req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip') || '127.0.0.1',\n        headers: Object.fromEntries(req.headers.entries()),\n        method: req.method,\n        url: req.url,\n      } as any;\n\n      // Convert to Express-like response object\n      const expressRes = {\n        status: (code: number) => ({\n          json: (data: any) => {\n            resolve(NextResponse.json(data, { status: code }));\n          },\n          send: (data: any) => {\n            resolve(new NextResponse(data, { status: code }));\n          },\n        }),\n        setHeader: () => {},\n        getHeader: () => undefined,\n      } as any;\n\n      // Call the rate limiter\n      limiter(expressReq, expressRes, () => {\n        // If we get here, the request is allowed\n        resolve(null);\n      });\n    });\n  };\n}\n\n// Utility function to get client IP from Next.js request\nexport function getClientIP(req: NextRequest): string {\n  const forwarded = req.headers.get('x-forwarded-for');\n  const realIP = req.headers.get('x-real-ip');\n  const remoteAddr = req.ip;\n  \n  if (forwarded) {\n    return forwarded.split(',')[0].trim();\n  }\n  \n  return realIP || remoteAddr || '127.0.0.1';\n}\n\n// Rate limiting middleware factory for different endpoint types\nexport function withRateLimit(type: keyof typeof rateLimitConfigs) {\n  const config = rateLimitConfigs[type];\n  const limiter = createRateLimiter(config);\n  \n  return async function rateLimitMiddleware(req: NextRequest) {\n    try {\n      const rateLimitResponse = await limiter(req);\n      \n      if (rateLimitResponse) {\n        // Rate limit exceeded\n        return rateLimitResponse;\n      }\n      \n      // Request is allowed, continue\n      return null;\n    } catch (error) {\n      console.error('Rate limiting error:', error);\n      // On error, allow the request to continue (fail open)\n      return null;\n    }\n  };\n}\n\n// Enhanced rate limiter with custom logic\nexport class AdvancedRateLimiter {\n  private store: Map<string, { count: number; resetTime: number }> = new Map();\n  private config: {\n    windowMs: number;\n    max: number;\n    keyGenerator?: (req: NextRequest) => string;\n    skipIf?: (req: NextRequest) => boolean;\n    onLimitReached?: (req: NextRequest, key: string) => void;\n  };\n\n  constructor(config: AdvancedRateLimiter['config']) {\n    this.config = config;\n    \n    // Clean up expired entries every minute\n    setInterval(() => {\n      const now = Date.now();\n      for (const [key, data] of this.store.entries()) {\n        if (now > data.resetTime) {\n          this.store.delete(key);\n        }\n      }\n    }, 60 * 1000);\n  }\n\n  async check(req: NextRequest): Promise<{ allowed: boolean; remaining: number; resetTime: number }> {\n    // Skip if condition is met\n    if (this.config.skipIf && this.config.skipIf(req)) {\n      return { allowed: true, remaining: this.config.max, resetTime: Date.now() + this.config.windowMs };\n    }\n\n    // Generate key for this request\n    const key = this.config.keyGenerator ? this.config.keyGenerator(req) : getClientIP(req);\n    const now = Date.now();\n    \n    // Get or create entry\n    let entry = this.store.get(key);\n    \n    if (!entry || now > entry.resetTime) {\n      // Create new entry or reset expired one\n      entry = {\n        count: 0,\n        resetTime: now + this.config.windowMs,\n      };\n      this.store.set(key, entry);\n    }\n\n    // Check if limit is exceeded\n    if (entry.count >= this.config.max) {\n      // Limit exceeded\n      if (this.config.onLimitReached) {\n        this.config.onLimitReached(req, key);\n      }\n      \n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: entry.resetTime,\n      };\n    }\n\n    // Increment counter\n    entry.count++;\n    \n    return {\n      allowed: true,\n      remaining: this.config.max - entry.count,\n      resetTime: entry.resetTime,\n    };\n  }\n}\n\n// Pre-configured advanced rate limiters\nexport const advancedAuthLimiter = new AdvancedRateLimiter({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5,\n  keyGenerator: (req) => `auth:${getClientIP(req)}`,\n  onLimitReached: (req, key) => {\n    console.warn(`Auth rate limit exceeded for ${key}`);\n    // Here you could add additional security measures like temporary IP blocking\n  },\n});\n\nexport const advancedUploadLimiter = new AdvancedRateLimiter({\n  windowMs: 60 * 1000, // 1 minute\n  max: 10,\n  keyGenerator: (req) => `upload:${getClientIP(req)}`,\n  skipIf: (req) => {\n    // Skip rate limiting for admin users (you'd need to implement auth check)\n    // const isAdmin = checkIfAdmin(req);\n    // return isAdmin;\n    return false;\n  },\n});\n\n// Export default configurations\nexport default {\n  auth: authLimiter,\n  upload: uploadLimiter,\n  api: apiLimiter,\n  search: searchLimiter,\n  passwordReset: passwordResetLimiter,\n  posting: postingLimiter,\n  withRateLimit,\n  AdvancedRateLimiter,\n  advancedAuthLimiter,\n  advancedUploadLimiter,\n};\n"}